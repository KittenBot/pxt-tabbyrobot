<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="/TnDQ2enI+`~z6+F7*5J" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="(~En3OeFILOf_P7a_j#u" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyrobot {" line1="    const TABBY_ADDR = 0x16" line2="    const REG_MOTOR = 0x02" line3="    const REG_SERVO1 = 0x03" line4="    const REG_SERVO2 = 0x04" line5="    const REG_HEADLIGHT = 0x05" line6="    const REG_BATTERY = 0x06" line7="" line8="    let neoStrip: neopixel.Strip;" line9="" line10="" line11="    export enum LeftRight {" line12="        //% block='Left'" line13="        LEFT = 0," line14="        //% block='Right'" line15="        RGIHT = 1," line16="    }" line17="" line18="    /**" line19="     * Init Peripherals on tabby robot" line20="     */" line21="    //% blockId=&quot;tabby_init&quot; block=&quot;Tabby Init&quot;" line22="    //% group=&quot;Tabby&quot;  weight=80" line23="    export function init() {" line24="        pins.i2cWriteNumber(TABBY_ADDR, 0x01, NumberFormat.UInt8BE)" line25="        pins.setPull(DigitalPin.P1, PinPullMode.PullNone)" line26="        pins.setPull(DigitalPin.P2, PinPullMode.PullNone)" line27="    }" line28="" line29="" line30="    /**" line31="     * Init RGB pixels on tabby robot" line32="     */" line33="    //% blockId=&quot;tabby_rgb&quot; block=&quot;RGB&quot;" line34="    //% group=&quot;Tabby&quot;  weight=63" line35="    export function rgb(): neopixel.Strip {" line36="        if (!neoStrip) {" line37="            neoStrip = neopixel.create(DigitalPin.P16, 2, NeoPixelMode.RGB)" line38="        }" line39="" line40="        return neoStrip;" line41="    }" line42="" line43="    /**" line44="     * Front Light control" line45="     */" line46="    //% block=&quot;Front Light Left $left Right $right&quot;" line47="    //% group=&quot;Tabby&quot;" line48="    //% left.min=0 left.max=100" line49="    //% right.min=0 right.max=100" line50="    export function frontlight(left: number, right: number) {" line51="        let buf = pins.createBuffer(3)" line52="        buf[0] = REG_HEADLIGHT" line53="        buf[1] = left" line54="        buf[2] = right" line55="        pins.i2cWriteBuffer(TABBY_ADDR, buf)" line56="" line57="    }" line58="" line59="    /**" line60="     * Motor Speed" line61="     */" line62="    //% block=&quot;Motor $idx Left $left Right $right&quot;" line63="    //% left.shadow=&quot;speedPicker&quot;" line64="    //% right.shadow=&quot;speedPicker&quot;" line65="    export function motorRun(left: number, right: number) {" line66="        let buf2 = pins.createBuffer(5)" line67="        // REG, M1A, M1B, M2A, M2B" line68="        buf2[0] = REG_MOTOR" line69="        if (left &gt;= 0) {" line70="            buf2[1] = left" line71="            buf2[2] = 0" line72="" line73="        } else {" line74="            buf2[1] = 0" line75="            buf2[2] = -left" line76="        }" line77="        if (right &gt;= 0) {" line78="            buf2[3] = right" line79="            buf2[4] = 0" line80="        } else {" line81="            buf2[3] = 0" line82="            buf2[4] = -right" line83="        }" line84="" line85="        pins.i2cWriteBuffer(TABBY_ADDR, buf2)" line86="    }" line87="" line88="    /**" line89="     * Motor Stop" line90="     */" line91="    //% block=&quot;Motor Stop&quot;" line92="    export function motorStop() {" line93="        let buf3 = pins.createBuffer(5)" line94="        // REG, M1A, M1B, M2A, M2B" line95="        buf3[0] = REG_MOTOR" line96="        buf3[1] = 0" line97="        buf3[2] = 0" line98="        buf3[3] = 0" line99="        buf3[4] = 0" line100="" line101="        pins.i2cWriteBuffer(TABBY_ADDR, buf3)" line102="    }" line103="" line104="    /**" line105="     * Servo Degree" line106="     */" line107="    //% block=&quot;Servo $idx set to $degree&quot;" line108="    //% degree.min=0 degree.max=180" line109="    export function servoSet(idx: LeftRight, degree: number) {" line110="        let buf4 = pins.createBuffer(3)" line111="        buf4[0] = idx == LeftRight.LEFT ? REG_SERVO1 : REG_SERVO2" line112="        let minPulse = 600" line113="        let maxPulse = 2400" line114="        let v_us = (degree * (maxPulse - minPulse) / 180 + minPulse)" line115="        buf4[1] = v_us &amp; 0xff" line116="        buf4[2] = v_us &gt;&gt; 8" line117="        pins.i2cWriteBuffer(TABBY_ADDR, buf4)" line118="    }" line119="" line120="    /**" line121="     * Line state" line122="     */" line123="    //% block=&quot;Line $idx&quot;" line124="    export function line(idx: LeftRight): number {" line125="        let value = pins.analogReadPin(idx == LeftRight.LEFT ? AnalogPin.P1 : AnalogPin.P2)" line126="        return value" line127="    }" line128="" line129="    /**" line130="     * Battery voltage" line131="     */" line132="    //% block=&quot;Battery voltage&quot;" line133="    export function battery(): number {" line134="        let buf5 = pins.createBuffer(1)" line135="        buf5[0] = REG_BATTERY" line136="        pins.i2cWriteBuffer(TABBY_ADDR, buf5)" line137="        let value2 = pins.i2cReadNumber(TABBY_ADDR, NumberFormat.UInt16BE)" line138="        // VBAT - 27K - ADC - 47K - GND" line139="        // console.log(&quot;adc:&quot;+value)" line140="        value2 = value2 / 65535 * 1.57 * 3.3" line141="        return value2" line142="    }" line143="" line144="    /**" line145="     * Ultrasonic distance" line146="     */" line147="    //% block=&quot;Ultrasonic distance&quot;" line148="    export function ultrasonic(): number {" line149="        // send pulse" line150="        let trig = DigitalPin.P14" line151="        let echo = DigitalPin.P14" line152="        pins.setPull(trig, PinPullMode.PullNone)" line153="        pins.digitalWritePin(trig, 0)" line154="        control.waitMicros(2)" line155="        pins.digitalWritePin(trig, 1)" line156="        control.waitMicros(10)" line157="        pins.digitalWritePin(trig, 0)" line158="" line159="        // read pulse" line160="        let d = pins.pulseIn(echo, PulseValue.High, 50000)" line161="        return d / 58" line162="    }" line163="" line164="" line165="" line166="" line167="" line168="}" numlines="169"></mutation></block></statement></block></xml>