<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="u{MqO0gjGz!!DWMO|3?9" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Kzam1!EHPFgM4QH;kRz~" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyrobot {" line1="" line2="    let isInited = false;" line3="    let neoStrip: neopixel.Strip;" line4="" line5="    export enum PWM {" line6="        M1P = 0," line7="        M1N = 1," line8="        M2P = 2," line9="        M2N = 3," line10="        LEFT = 4," line11="        RIGHT = 5," line12="        S1 = 6," line13="        S2 = 7" line14="    }" line15="" line16="    export enum FrontLight {" line17="        //% block='Left'" line18="        LEFT=4," line19="        //% block='Right'" line20="        RGIHT = 4," line21="    }" line22="" line23="    function PCA9634Init(){" line24="        let addr = 0x00" line25="        let buf = pins.createBuffer(2)" line26="        buf[0] = 0x0" line27="        buf[1] = 0x01" line28="        pins.i2cWriteBuffer(addr, buf)" line29="        basic.pause(200)" line30="" line31="        pins.i2cWriteNumber(addr, 0x0, NumberFormat.UInt8BE);" line32="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line33="" line34="        buf = pins.createBuffer(3)" line35="        buf[0] = 0x0C | 0x80" line36="        buf[1] = 0xAA" line37="        buf[2] = 0xAA" line38="        pins.i2cWriteBuffer(addr, buf)" line39="        basic.pause(200)" line40="        isInited = true;" line41="    }" line42="" line43="    function PCA9634Pwm(ch: PWM, value: number){" line44="        if (!isInited) PCA9634Init()" line45="        let buf2 = pins.createBuffer(2)" line46="        buf2[0] = (ch+1)*2;" line47="        buf2[1] = value" line48="        pins.i2cWriteBuffer(0, buf2)" line49="    }" line50="" line51="" line52="    /**" line53="     * Init RGB pixels on tabby robot" line54="     */" line55="    //% blockId=&quot;tabby_rgb&quot; block=&quot;RGB&quot;" line56="    //% group=&quot;Tabby&quot;  weight=63" line57="    export function rgb(): neopixel.Strip {" line58="        if (!neoStrip) {" line59="            neoStrip = neopixel.create(DigitalPin.P16, 2, NeoPixelMode.RGB)" line60="        }" line61="" line62="        return neoStrip;" line63="    }" line64="" line65="    /**" line66="     * Front Light control" line67="     */" line68="    //% block=&quot;Front Light %idx %value&quot;" line69="    //% group=&quot;Tabby&quot;" line70="    export function frontlight(idx: FrontLight, value: number){" line71="" line72="    }" line73="" line74="" line75="" line76="}" numlines="77"></mutation></block></statement></block></xml>