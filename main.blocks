<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="gmFx#RY,@wx4P.])(UhZ" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="1NAb=`^qK.@iWF2y~v_o" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyrobot {" line1="    const TABBY_ADDR = 0x16" line2="    const REG_MOTOR = 0x02" line3="    const REG_SERVO1 = 0x03" line4="    const REG_SERVO2 = 0x04" line5="    const REG_HEADLIGHT = 0x05" line6="    const REG_BATTERY = 0x06" line7="" line8="    let neoStrip: neopixel.Strip;" line9="" line10="" line11="    export enum LeftRight {" line12="        //% block='Left'" line13="        LEFT = 0," line14="        //% block='Right'" line15="        RGIHT = 1," line16="    }" line17="" line18="    /**" line19="     * Init Peripherals on tabby robot" line20="     */" line21="    //% blockId=&quot;tabby_init&quot; block=&quot;Tabby Init&quot;" line22="    //% group=&quot;Tabby&quot;  weight=80" line23="    export function init() {" line24="        pins.i2cWriteNumber(TABBY_ADDR, 0x01, NumberFormat.UInt8BE)" line25="        pins.setPull(DigitalPin.P1, PinPullMode.PullNone)" line26="        pins.setPull(DigitalPin.P2, PinPullMode.PullNone)" line27="    }" line28="" line29="" line30="    /**" line31="     * Init RGB pixels on tabby robot" line32="     */" line33="    //% blockId=&quot;tabby_rgb&quot; block=&quot;RGB&quot;" line34="    //% group=&quot;Tabby&quot;  weight=63" line35="    export function rgb(): neopixel.Strip {" line36="        if (!neoStrip) {" line37="            neoStrip = neopixel.create(DigitalPin.P16, 2, NeoPixelMode.RGB)" line38="        }" line39="" line40="        return neoStrip;" line41="    }" line42="" line43="    /**" line44="     * Front Light control" line45="     */" line46="    //% block=&quot;Front Light Left $left Right $right&quot;" line47="    //% group=&quot;Tabby&quot;" line48="    //% left.min=0 left.max=100" line49="    //% right.min=0 right.max=100" line50="    export function frontlight(left: number, right: number) {" line51="        let buf = pins.createBuffer(3)" line52="        buf[0] = REG_HEADLIGHT" line53="        buf[1] = left" line54="        buf[2] = right" line55="        pins.i2cWriteBuffer(TABBY_ADDR, buf)" line56="" line57="    }" line58="" line59="    /**" line60="     * Motor Speed" line61="     */" line62="    //% block=&quot;Motor $idx Left $left Right $right&quot;" line63="    //% left.shadow=&quot;speedPicker&quot;" line64="    //% right.shadow=&quot;speedPicker&quot;" line65="    export function motorRun(left: number, right: number) {" line66="        let buf2 = pins.createBuffer(5)" line67="" line68="        serial.redirectToUSB()" line69="" line70="        // REG, M1A, M1B, M2A, M2B" line71="        buf2[0] = REG_MOTOR" line72="        if (left &gt;= 0) {" line73="            buf2[3] = left" line74="            buf2[4] = 0" line75="" line76="        } else {" line77="            buf2[3] = 0" line78="            buf2[4] = -left" line79="        }" line80="        if (right &gt;= 0) {" line81="            buf2[1] = right" line82="            buf2[2] = 0" line83="        } else {" line84="            buf2[1] = 0" line85="            buf2[2] = -right" line86="        }" line87="        serial.writeString(&quot;123123&quot;)" line88="        serial.writeLine(buf2.toString())" line89="        serial.writeString(&quot;456456&quot;)" line90="        pins.i2cWriteBuffer(TABBY_ADDR, buf2)" line91="    }" line92="" line93="    /**" line94="     * Motor Stop" line95="     */" line96="    //% block=&quot;Motor Stop&quot;" line97="    export function motorStop() {" line98="        let buf3 = pins.createBuffer(5)" line99="        // REG, M1A, M1B, M2A, M2B" line100="        buf3[0] = REG_MOTOR" line101="        buf3[1] = 0" line102="        buf3[2] = 0" line103="        buf3[3] = 0" line104="        buf3[4] = 0" line105="" line106="        pins.i2cWriteBuffer(TABBY_ADDR, buf3)" line107="    }" line108="" line109="    /**" line110="     * Servo Degree" line111="     */" line112="    //% block=&quot;Servo $idx set to $degree&quot;" line113="    //% degree.min=0 degree.max=180" line114="    export function servoSet(idx: LeftRight, degree: number) {" line115="        let buf4 = pins.createBuffer(3)" line116="        buf4[0] = idx == LeftRight.LEFT ? REG_SERVO1 : REG_SERVO2" line117="        let minPulse = 600" line118="        let maxPulse = 2400" line119="        let v_us = (degree * (maxPulse - minPulse) / 180 + minPulse)" line120="        buf4[1] = v_us &amp; 0xff" line121="        buf4[2] = v_us &gt;&gt; 8" line122="        pins.i2cWriteBuffer(TABBY_ADDR, buf4)" line123="    }" line124="" line125="    /**" line126="     * Line state" line127="     */" line128="    //% block=&quot;Line $idx&quot;" line129="    export function line(idx: LeftRight): number {" line130="        let value = pins.analogReadPin(idx == LeftRight.LEFT ? AnalogPin.P1 : AnalogPin.P2)" line131="        return value" line132="    }" line133="" line134="    /**" line135="     * Battery voltage" line136="     */" line137="    //% block=&quot;Battery voltage&quot;" line138="    export function battery(): number {" line139="        let buf5 = pins.createBuffer(1)" line140="        buf5[0] = REG_BATTERY" line141="        pins.i2cWriteBuffer(TABBY_ADDR, buf5)" line142="        let value2 = pins.i2cReadNumber(TABBY_ADDR, NumberFormat.UInt16BE)" line143="        // VBAT - 27K - ADC - 47K - GND" line144="        // console.log(&quot;adc:&quot;+value)" line145="        value2 = value2 / 65535 * 1.57 * 3.3" line146="        return value2" line147="    }" line148="" line149="    /**" line150="     * Ultrasonic distance" line151="     */" line152="    //% block=&quot;Ultrasonic distance&quot;" line153="    export function ultrasonic(): number {" line154="        // send pulse" line155="        let trig = DigitalPin.P14" line156="        let echo = DigitalPin.P14" line157="        pins.setPull(trig, PinPullMode.PullNone)" line158="        pins.digitalWritePin(trig, 0)" line159="        control.waitMicros(2)" line160="        pins.digitalWritePin(trig, 1)" line161="        control.waitMicros(10)" line162="        pins.digitalWritePin(trig, 0)" line163="" line164="        // read pulse" line165="        let d = pins.pulseIn(echo, PulseValue.High, 50000)" line166="        return d / 58" line167="    }" line168="" line169="" line170="" line171="" line172="" line173="}" numlines="174"></mutation></block></statement></block></xml>